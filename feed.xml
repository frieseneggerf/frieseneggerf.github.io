<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://friesenegger.xyz/feed.xml" rel="self" type="application/atom+xml"/><link href="https://friesenegger.xyz/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-09T21:02:11+00:00</updated><id>https://friesenegger.xyz/feed.xml</id><title type="html">blank</title><subtitle>Pharmaceutical Sciences Student at Ludwig-Maximilians-University Munich </subtitle><entry><title type="html">How to use Cellpose with Cellprofiler (without plugin)</title><link href="https://friesenegger.xyz/blog/2024/cellpose_cellprofiler/" rel="alternate" type="text/html" title="How to use Cellpose with Cellprofiler (without plugin)"/><published>2024-03-01T00:00:00+00:00</published><updated>2024-03-01T00:00:00+00:00</updated><id>https://friesenegger.xyz/blog/2024/cellpose_cellprofiler</id><content type="html" xml:base="https://friesenegger.xyz/blog/2024/cellpose_cellprofiler/"><![CDATA[<p><a href="https://www.cellpose.org/">Cellpose</a> is generalist segmentation algorithm that allows for reliable identification of cells in microscope images even under suboptimal conditions (e.g. bad focus, degenerated cells) and its usage in combination with <a href="https://cellprofiler.org/">Cellprofiler</a> enables highly automated analysis of cell/tissue morphology. A <a href="https://forum.image.sc/t/new-cellprofiler-4-plugin-runcellpose/56858">plugin</a> allows for direct integration of the two tools and is the most convenient way to build a pipeline, however for various reasons it can be useful to separate segmentation process and analysis.</p> <h4 id="0-install-cellpose--cellprofiler">0) Install Cellpose &amp; Cellprofiler</h4> <p>Before starting, make sure you have <a href="https://www.python.org/downloads/">python</a> installed. If you lack permission or don’t want to install software on the system you are working on <a href="https://winpython.github.io/">WinPython</a> offers an easy way to run python from a local folder without installation.</p> <p>Open a PowerShell prompt (when using WinPython run “WinPython Powershell Prompt.exe”) and run the commands below to install Cellpose and it’s optional graphical user interface.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">"cellpose"</span><span class="w">
</span><span class="n">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">"cellpose[gui]"</span><span class="w">
</span></code></pre></div></div> <p>To install Cellprofiler you can either download the <a href="https://cellprofiler.org/releases">installer</a> or run the command below in a PowerShell prompt.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">"cellprofiler"</span><span class="w">
</span></code></pre></div></div> <h4 id="1-segmentation-in-cellpose">1) Segmentation in Cellpose</h4> <p>To start Cellpose in gui mode run <code class="language-plaintext highlighter-rouge">cellpose</code> in a PowerShell prompt. Here you can load single pictures from you dataset and determine the optimal run parameters. You can use the “Calibrate” button after you loaded a picture to determine the average pixel size of your cells. For a more detailed explanation check out the <a href="https://cellpose.readthedocs.io/en/latest/">official documentation.</a></p> <p>Segmenting all of your pictures using the gui can be cumbersome if your dataset has n&gt;1, so the command below can process an entire folder full of pictures and safe the produced masks as png.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cellpose</span><span class="w"> </span><span class="se">`
</span><span class="nt">--dir</span><span class="w"> </span><span class="s2">"C:\Users\User\Documents\Cellpose\in"</span><span class="w"> </span><span class="se">`
</span><span class="nt">--savedir</span><span class="w"> </span><span class="s2">"C:\Users\User\Documents\Cellpose\out"</span><span class="w"> </span><span class="se">`
</span><span class="nt">--save_png</span><span class="w"> </span><span class="se">`
</span><span class="nt">--chan</span><span class="w"> </span><span class="nx">0</span><span class="w"> </span><span class="se">`
</span><span class="nt">--diameter</span><span class="w"> </span><span class="nx">90</span><span class="w"> </span><span class="se">`
</span><span class="nt">--pretrained_model</span><span class="w"> </span><span class="nx">cyto3</span><span class="w"> </span><span class="se">`
</span><span class="nt">--exclude_on_edges</span><span class="w"> 
</span></code></pre></div></div> <p>A short explanation of what the flags achieve, for more details check the <a href="https://cellpose.readthedocs.io/en/latest/cli.html">documentation:</a> <code class="language-plaintext highlighter-rouge">--dir</code> Choose the folder where your input images are saved <code class="language-plaintext highlighter-rouge">--savedir</code> Choose the folder to which your masks are saved <code class="language-plaintext highlighter-rouge">--save_png</code> Saves the result of the segmentation (=mask) as png file <code class="language-plaintext highlighter-rouge">--chan 0</code> Uses the grey channel for segmentation <code class="language-plaintext highlighter-rouge">--diameter</code> Choose the average diameter of your cells in pixel (can be determined in the gui) <code class="language-plaintext highlighter-rouge">--pretrained_model cyto3</code> Selects the model to use for segmentation, tweak as necessary <code class="language-plaintext highlighter-rouge">--eclude_on_edges</code> Makes sure cells on the edge of the image aren’t segmented If you have a gpu I recommend you add <code class="language-plaintext highlighter-rouge">--use_gpu</code> to significantly speed up the segmentation.</p> <h4 id="2-analysis-in-cellprofiler">2) Analysis in Cellprofiler</h4> <p>The generated masks can be used in cellprofiler to detect the segmented cells as individual objects. To achieve this, assign your masks in “Images” and “NamesAndTypes” and use the “ConvertImageToObjects” module in your pipeline, select the cellpose masks as input, name your output objects and select “No” on “Convert to boolean image”</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/CellProfiler_ImageToObj-480.webp 480w,/assets/img/CellProfiler_ImageToObj-800.webp 800w,/assets/img/CellProfiler_ImageToObj-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/CellProfiler_ImageToObj.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>You can then use the objects in other modules such as “MeasureObjectSizeShape”.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="research"/><category term="python"/><category term="cellprofiler"/><category term="cellpose"/><summary type="html"><![CDATA[A (very) short tutorial]]></summary></entry><entry><title type="html">First test post</title><link href="https://friesenegger.xyz/blog/2024/test/" rel="alternate" type="text/html" title="First test post"/><published>2024-02-03T20:50:00+00:00</published><updated>2024-02-03T20:50:00+00:00</updated><id>https://friesenegger.xyz/blog/2024/test</id><content type="html" xml:base="https://friesenegger.xyz/blog/2024/test/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">
   1.</span> Like this:<span class="sb">

      ```c
      printf("Hello, World!");
      ```

</span><span class="p">   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li> <p>We can put fenced code blocks inside nested bullets, too.</p> <ol> <li> <p>Like this:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li> <p>The key is to indent your fenced block in the same line as the first character of the line.</p> </li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><category term="jorge"/><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>